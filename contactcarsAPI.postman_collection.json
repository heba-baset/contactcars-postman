{
	"info": {
		"_postman_id": "ec2768c9-0801-4a3c-84d1-b94fb446c89b",
		"name": "contactcarsAPI",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "https://www.ounass.ae/categories/getcategorytree",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "de3a1293-61c6-409c-ad3f-8f62d520283f",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"////////////////////////////Every response should return 200 OK////////////////////////////\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"////////////////////////////should have ID////////////////////////\r",
							"\r",
							"pm.test(\"Test hasCategoryId Value\", function () {\r",
							"       for (x = 0; x < jsonData.children.length; x++) { \r",
							"               //console.log(\"[1]\"+jsonData.children[x].categoryId);\r",
							"\t\t\t    pm.expect(subchildren.children[j]).to.have.property('categoryId');\r",
							"                for (let subchildren of jsonData.children){\r",
							"\t\t\t\t\tfor (j = 0; j < subchildren.children.length; j++) { \r",
							"                         // console.log(\"[2]\"+subchildren.children[j].categoryId);\r",
							"                         pm.expect(subchildren.children[j]).to.have.property('categoryId');\r",
							"\t\t\t\t\t\tfor (let childsubchildren of subchildren.children){\r",
							"\t\t\t\t\t\t\tfor (i = 0; i < childsubchildren.children.length; i++) { \r",
							"                             //console.log(\"[3]\"+childsubchildren.children[i].categoryId);\r",
							"                             pm.expect(childsubchildren.children[i]).to.have.property('categoryId');\r",
							"\t\t\t\t\t\t\t}\r",
							"\t\t\t\t\t\t}\r",
							"\t\t\t\t\t}\r",
							"                }\r",
							"            }\r",
							"});\r",
							"\r",
							"////////////////////////////should have url////////////////////////\r",
							"\r",
							"pm.test(\"Test hasUrl Value\", function () {\r",
							"       for (x = 0; x < jsonData.children.length; x++) { \r",
							"               //console.log(\"[1]\"+jsonData.children[x].url);\r",
							"\t\t\t    pm.expect(subchildren.children[j]).to.have.property('url');\r",
							"                for (let subchildren of jsonData.children){\r",
							"\t\t\t\t\tfor (j = 0; j < subchildren.children.length; j++) { \r",
							"                         // console.log(\"[2]\"+subchildren.children[j].url);\r",
							"                         pm.expect(subchildren.children[j]).to.have.property('url');\r",
							"\t\t\t\t\t\tfor (let childsubchildren of subchildren.children){\r",
							"\t\t\t\t\t\t\tfor (i = 0; i < childsubchildren.children.length; i++) { \r",
							"                             //console.log(\"[3]\"+childsubchildren.children[i].url);\r",
							"                             pm.expect(childsubchildren.children[i]).to.have.property('url');\r",
							"\t\t\t\t\t\t\t}\r",
							"\t\t\t\t\t\t}\r",
							"\t\t\t\t\t}\r",
							"                }\r",
							"            }\r",
							"});\r",
							"////////////////////////////should have name////////////////////////\r",
							"\r",
							"pm.test(\"Test hasName Value\", function () {\r",
							"       for (x = 0; x < jsonData.children.length; x++) { \r",
							"               //console.log(\"[1]\"+jsonData.children[x].name);\r",
							"\t\t\t    pm.expect(subchildren.children[j]).to.have.property('name');\r",
							"                for (let subchildren of jsonData.children){\r",
							"\t\t\t\t\tfor (j = 0; j < subchildren.children.length; j++) { \r",
							"                         // console.log(\"[2]\"+subchildren.children[j].name);\r",
							"                         pm.expect(subchildren.children[j]).to.have.property('name');\r",
							"\t\t\t\t\t\tfor (let childsubchildren of subchildren.children){\r",
							"\t\t\t\t\t\t\tfor (i = 0; i < childsubchildren.children.length; i++) { \r",
							"                             //console.log(\"[3]\"+childsubchildren.children[i].name);\r",
							"                             pm.expect(childsubchildren.children[i]).to.have.property('name');\r",
							"\t\t\t\t\t\t\t}\r",
							"\t\t\t\t\t\t}\r",
							"\t\t\t\t\t}\r",
							"                }\r",
							"            }\r",
							"});\r",
							"////////////////////////////should have name////////////////////////\r",
							"\r",
							"pm.test(\"Test level 1 & 2 hasfeatureImage Except 3rd level\", function () {\r",
							"       for (x = 0; x < jsonData.children.length; x++) { \r",
							"               //console.log(\"[1]\"+jsonData.children[x].featureImage);\r",
							"\t\t\t    pm.expect(subchildren.children[j]).to.have.property('featureImage');\r",
							"                for (let subchildren of jsonData.children){\r",
							"\t\t\t\t\tfor (j = 0; j < subchildren.children.length; j++) { \r",
							"                         // console.log(\"[2]\"+subchildren.children[j].featureImage);\r",
							"                         pm.expect(subchildren.children[j]).to.have.property('featureImage');\r",
							"\t\t\t\t\t\tfor (let childsubchildren of subchildren.children){\r",
							"\t\t\t\t\t\t\tfor (i = 0; i < childsubchildren.children.length; i++) { \r",
							"                             //console.log(\"[3]\"+childsubchildren.children[i].featureImage);\r",
							"                             pm.expect(childsubchildren.children[i]).to.not.have.property('featureImage');\r",
							"\t\t\t\t\t\t\t}\r",
							"\t\t\t\t\t\t}\r",
							"\t\t\t\t\t}\r",
							"                }\r",
							"            }\r",
							"});\r",
							"\r",
							"\r",
							"//////////////////First node should have more than 10 categories on children_data node./////////////////\r",
							"pm.test(\"test categories length\", function () {\r",
							"for (let children of jsonData.children){\r",
							"    if(children.level == '1'){\r",
							"        var categoryName=children.name;\r",
							"        var childrenLenght=children.children.length;\r",
							"        console.log(childrenLenght);\r",
							"        pm.expect(childrenLenght).to.be.above(10);\r",
							"        \r",
							"       // pm.expect(childrenLenght).to.be.above(-1); because not all of them above 10\r",
							"      \r",
							"    }\r",
							"}\r",
							"});\r",
							"\r",
							"pm.test(\"test categories length\", function () {\r",
							"for (let children of jsonData.children){\r",
							"    if(children.level == '1'){\r",
							"        var categoryName=children.name;\r",
							"        var childrenLenght=children.children.length;\r",
							"        //console.log(myLenght);\r",
							"        if(childrenLenght < 10){\r",
							"\r",
							"            console.log(children.name);\r",
							"        }\r",
							"       //for (i = 0; i < myLenght; i++) { \r",
							"\r",
							"    }\r",
							"}\r",
							"});\r",
							"\r",
							"\r",
							"////////////////////////////Third level category should have “includeInMenu” as false///////////////////////\r",
							"pm.test(\"Test IncludeInMenu Value\", function () {\r",
							"for (let children of jsonData.children){\r",
							"    if(children.level == '1'){\r",
							"       for (i = 0; i < children.children.length; i++) { \r",
							"         pm.expect(children.children[i].includeInMenu).to.be.false;\r",
							"         if (children.children[i].includeInMenu==false){\r",
							"          pm.expect(children.children[i].includeInMenu).to.be.false;\r",
							"\r",
							"        }        \r",
							"       }\r",
							"    }\r",
							"}\r",
							"});\r",
							"\r",
							"pm.test(\"print IncludeInMenu true Value\", function () {\r",
							"for (let children of jsonData.children){\r",
							"    if(children.level == '1'){\r",
							"       for (i = 0; i < children.children.length; i++) { \r",
							"        if (children.children[i].includeInMenu==true){\r",
							"            console.log(children.children[i].categoryId);\r",
							"        }        \r",
							"       }\r",
							"    }\r",
							"}\r",
							"});\r",
							"//////////////////////////////////////////////////////////////////////////\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://www.ounass.ae/categories/getcategorytree",
					"protocol": "https",
					"host": [
						"www",
						"ounass",
						"ae"
					],
					"path": [
						"categories",
						"getcategorytree"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}